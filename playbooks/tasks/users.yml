---
# Copyright Â© 2021 Mark Dumay. All rights reserved.
# Use of this source code is governed by The MIT License (MIT) that can be found in the LICENSE file.
- name: Include default variables
  include_vars:
    dir: ../defaults
    files_matching: users.yml
  tags:
    - users

- name: Validate presence of variable 'users_enabled'
  fail:
    msg: "Cannot find variable 'users_enabled'"
  when: (users_remove_unauthorized or users_update_hash) and users_enabled is undefined
  tags:
    - users

- name: Find all users without bcrypt-encrypted password hash
  become: yes
  register: users_no_bcrypt
  shell: |
    set -o pipefail
    grep -vE '*:\$2b\$*' /etc/shadow | cut -d: -f1
  args:
    executable: /bin/bash
  when: users_update_hash
  tags:
    - users

- name: Update password hash of enabled users if needed
  become: yes
  no_log: true # do not leak credentials to Ansible log
  user:
    name: "{{ item.key }}"
    password: "{{ item.value.password | password_hash('bcrypt') }}"
  loop: "{{ lookup('dict', users_enabled) }}"
  when: users_update_hash and item.value.password is defined and item.key in users_no_bcrypt.stdout_lines
  tags:
    - users

- name: Retrieve current users with login
  become: yes
  register: users_current
  shell: |
    set -o pipefail
    getent passwd | grep -v '/usr/sbin/nologin\|/bin/false\|/bin/sync' | cut -d: -f1 | sort -u
  args:
    executable: /bin/bash
  when: users_remove_unauthorized
  tags:
    - users

- name: Determine unauthorized users
  set_fact:
    users_unauthorized: "{{ users_current.stdout_lines | difference(users_enabled) }}"
  when: users_remove_unauthorized
  tags:
    - users

- name: Remove unauthorized users
  become: yes
  user:
    name: "{{ item }}"
    state: absent
    remove: yes
  with_items:
    - "{{ users_unauthorized }}"
  when: users_remove_unauthorized
  tags:
    - users

- name: Create tmp directory for each user
  become: yes
  no_log: true # do not leak credentials to Ansible log
  file:
    path: "/home/{{ item.key }}/tmp"
    state: directory
    owner: "{{ item.key }}"
    group: "{{ item.key }}"
    mode: 0750
  loop: "{{ lookup('dict', users_enabled) }}"
  when: item.value.password is defined
  tags:
    - users

- name: Update environment variables for TMP directory
  become: yes
  no_log: true # do not leak credentials to Ansible log
  lineinfile:
    dest: "/home/{{ item.key }}/.profile"
    create: yes
    state: present
    owner: "{{ item.key }}"
    group: "{{ item.key }}"
    mode: 0600
    line: "export TEMP=$HOME/tmp; export TEMPDIR=$HOME/tmp; export TMP=$HOME/tmp; export TMPDIR=$HOME/tmp"
  loop: "{{ lookup('dict', users_enabled) }}"
  when: item.value.password is defined
  tags:
    - users

- name: Source .bashrc at SSH login
  become: yes
  no_log: true # do not leak credentials to Ansible log
  lineinfile:
    dest: "/home/{{ item.key }}/.profile"
    create: yes
    state: present
    owner: "{{ item.key }}"
    group: "{{ item.key }}"
    mode: 0600
    line: "[ -f ~/.bashrc ] && . ~/.bashrc"
  loop: "{{ lookup('dict', users_enabled) }}"
  when: item.value.password is defined
  tags:
    - users

- name: Update sudo environment variable for TMP directory
  become: yes
  no_log: true # do not leak credentials to Ansible log
  lineinfile:
    dest: "/home/{{ item.key }}/.bashrc"
    create: yes
    state: present
    owner: "{{ item.key }}"
    group: "{{ item.key }}"
    mode: 0600
    line: "alias sudo='sudo env TMPDIR=$TMPDIR $@'"
  loop: "{{ lookup('dict', users_enabled) }}"
  when: item.value.password is defined
  tags:
    - users
...