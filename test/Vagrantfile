#======================================================================================================================
# Title         : Vagrantfile
# Description   : Create a VM with Ubuntu 20.04 LTS for Testing of Server Hardening and Docker Installation
# Author        : Mark Dumay
# Date          : January 7th, 2021
# Version       : 0.3.0
# Usage         : vagrant up
# Repository    : https://github.com/markdumay/ubuntu-docker.git
# License       : MIT - https://github.com/markdumay/ubuntu-docker/blob/master/LICENSE
# Credits       : Inspired by Hardening repository from Thomas Sjögren (https://github.com/konstruktoid/hardening/)
# Comments      : Portions copyrighted by Thomas Sjögren (konstruktoid), with Apache License 2.0
#======================================================================================================================


#======================================================================================================================
# This Vagrant configuration defines a virtual machine (VM) using VirtualBox as provider. The VM uses the official 
# Ubuntu 20.04 LTS (Focal Fossa) build hosted on Vagrant Cloud. To improve performance and stability, Oracle VM 
# VirtualBox Guest Additions are installed too. The resulting VM is intended to be used for testing of Ansible
# playbooks to harden the host and to install the Docker Community Engine. As such, an additional admin user is
# configured next to the default Vagrant user. The admin user, named 'ansible' by default, uses the public SSH key of
# the host's current user by default. It also assigns a password which is encrypted in an Ansible Vault. 
#
# To satisfy several security recommendations, a virtual SCSI disk (/dev/sdc) of 5GiB (default size) is embedded in the
# VM. This disk consists of four partitions, that act as mount point for the following directories:
# PARTITION SIZE        MOUNT POINT
# --------- ----        -----------
# /dev/sdc1   500MiB    /var/log
# /dev/sdc2   500MiB    /var/log/audit
# /dev/sdc3   500MiB    /home
# /dev/sdc4 3.500MiB    /var/lib/docker
#
# Prerequisites:
# - VirtualBox, install from https://www.virtualbox.org/wiki/Downloads
# - Vagrant, install from https://www.vagrantup.com/downloads
# - Ansible, see https://docs.ansible.com/ansible/latest/installation_guide/intro_installation.html
# - A public SSH key at '~/.ssh/id_rsa.pub', use 'ssh-keygen -t rsa' to generate one if needed
# - An Ansible Vault file in YAML notation at '~/.ansible/blog_credentials.yml', for example:
# ansible:
#     password: replace_me
#
# Usage:
# - Initiate the VM with `vagrant up`
# - Access the VM with either `vagrant ssh` or `ssh ansible@10.0.0.10`
# - If needed, update the ECDSA key fingerprint of the VM in '~/.ssh/known_hosts'
# - Leave the VM's shell with `exit`
#
# The following variables are available to simplify adjustment of the VM's configuration.
# VARIABLE          DEFAULT VALUE                       DESCRIPTION
# --------          -------------                       -----------
# name              'focal'                             Name of the VM
# box               'ubuntu/focal64'                    Base image for the VM
# memory            2048                                Available RAM for the VM in MiB
# cpus              2                                   Number of CPU cores for the VM
# disk_path         '/opt/vm/focal_disk01.vdi'          Host location of the virtual disk
# disk_name         'sdc'                               Device name of the virtual disk
# disk_size         5                                   Virtual disk size in GiB, first 2GiB is reserved for system
# ip                '10.0.0.10'                         IP address of the VM
# ssh_path          '~/.ssh/id_rsa.pub'                 Public SSH key to provision for admin user
# admin_user        'ansible'                           Name of admin user to add to VM
# ansible_vault     '~/.ansible/vault.yml'              Ansible vault file that contains the admin password
# grub_password     'false'                             Protects boot process with admin credentials if 'true'
#
# This Vagrant configuration is based on an example developed by Thomas Sjögren (konstruktoid), whom also authored an 
# Ansible playbook for the hardening of several Linux distributions, including Ubuntu 20.04 LTS. He is also the editor
# of the Docker Bench for Security.
#======================================================================================================================
Vagrant.configure('2') do |config|
    name = 'focal'                                      # Name of the VM
    box = 'ubuntu/focal64'                              # Base image for the VM
    memory = 2048                                       # Available RAM for the VM in MiB
    cpus = 2                                            # Number of CPU cores for the VM
    disk_path = '/opt/vm/focal_disk01.vdi'              # Host location of the virtual disk
    disk_name = 'sdc'                                   # Device name of the virtual disk
    disk_size = 5                                       # Virtual disk size in GiB, first 2GiB is reserved for system
    ip = '10.0.0.10'                                    # IP address of the VM
    ssh_path = '~/.ssh/id_rsa.pub'                      # Public SSH key to provision for admin user
    admin_user = 'admin'                                # Name of admin user to add to VM
    ansible_vault = '~/.ansible/vault.yml'              # Ansible vault file that contains the admin password
    grub_password = 'false'                             # Protects boot process with admin credentials if 'true'

    # Provision CPU, memory, NIC, and UART
    config.vbguest.installer_options = { allow_kernel_upgrade: true }
    config.vm.provider 'virtualbox' do |p|
        p.cpus = cpus
        p.memory = memory
        p.default_nic_type = 'Am79C973'
        p.customize ['modifyvm', :id, '--uart1', '0x3F8', '4']
        p.customize ['modifyvm', :id, '--uartmode1', 'file', File::NULL]
    end

    # Initiate SCSI storage controller and add a disk image
    config.vm.provider 'virtualbox' do |disk|
        if ! File.exists?(disk_path)
            disk.customize ['createhd', '--filename', disk_path, '--variant', 'Standard', '--size', disk_size * 1024]
        end
        disk.customize ['storageattach', :id, '--storagectl', 'SCSI', '--port', 2, '--device', 0, '--type', 'hdd', 
            '--medium', disk_path]
    end

    # Configure base image, hostname, network, partitions, and sudo user of VM
    config.vm.define name do |vm|
        vm.vm.box = box
        vm.vm.hostname = name
        vm.vm.boot_timeout = 300
        vm.ssh.extra_args = ['-o', 'ConnectTimeout=300']
        vm.ssh.insert_key = true
        vm.vm.network 'private_network', ip: ip
        vm.vm.provision 'file', source: ssh_path, destination: '/vagrant/public-ssh/id_rsa.pub'
        
        # Create partitions, mount points, and sudo user during creation of VM        
        if ARGV[0] == 'up'
            # If needed, create partitions and mount points
            if ! File.exist?(disk_path)
                vm.vm.provision 'shell', path: 'createPartitions.sh', args: ["#{disk_name}", "#{disk_size}G"]
            end

            # Read password for admin_user from ansible vault file, asking user for vault password
            cmd = `ansible localhost -m debug -a var="#{admin_user}.password" -e "@#{ansible_vault}" --ask-vault-pass 2>/dev/null`
            admin_password = `echo "#{cmd}" | grep "#{admin_user}.password" | awk -F': ' '{printf $2}'`
            if admin_password.to_s.empty?
                puts 'ERROR: Cannot decrypt admin password'
                abort
            end

            # If needed, configure boot password and add sudo user with password/SSH public key
            vm.vm.provision 'shell', inline: <<-SCRIPT
                set +o history # exclude commands from bash history to prevent password leakage
                if ! id -u "#{admin_user}" > /dev/null 2>&1 ; then
                    # Add admin user
                    echo "Adding admin user"
                    groupadd "#{admin_user}"
                    useradd -g "#{admin_user}" "#{admin_user}" -d /home/"#{admin_user}" -s /bin/bash 
                    echo "#{admin_user}:#{admin_password}" | chpasswd
                    usermod -aG sudo "#{admin_user}"  # assign sudo rights

                    # Add SSH key
                    mkdir -p "/home/#{admin_user}/.ssh" 
                    cp -r /vagrant/public-ssh/id_rsa.pub "/home/#{admin_user}/.ssh/authorized_keys" # deploy ssh key
                    chown -R "#{admin_user}:#{admin_user}" "/home/#{admin_user}"
                    chmod 700 "/home/#{admin_user}/.ssh"
                    chmod 600 "/home/#{admin_user}/.ssh/authorized_keys"

                    # Set boot password (equal to admin password)
                    if [ "#{grub_password}" == 'true' ]; then
                        echo "Setting boot password"
                        hash=$(echo -e "#{admin_password}\n#{admin_password}" | \ 
                            LC_ALL=C /usr/bin/grub-mkpasswd-pbkdf2 | grep -Po 'grub\.pbkdf2\.sha512\..*')
                    {
                        echo "set superusers=\"#{admin_user}\""
                        echo "password_pbkdf2 #{admin_user} ${hash}"
                    } >> /etc/grub.d/40_custom
                        update-grub
                    else
                        echo "Skipping boot password"
                    fi
                fi
            SCRIPT
        end
    end
end