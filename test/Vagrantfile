# Copyright 2020 Thomas SjÃ¶gren (konstruktoid)
# License: Apache License 2.0 (https://github.com/konstruktoid/hardening/blob/master/LICENSE)
# Source repository: https://github.com/konstruktoid/hardening/

# Adapted by Mark Dumay on January 6th, 2021. 

Vagrant.configure("2") do |config|
    name = 'focal'                                      # name of the virtual machine
    box = 'ubuntu/focal64'                              # base image for the virtual machine
    memory = 2048                                       # available RAM for the virtual machine in MiB
    cpus = 2                                            # number of CPU cores for the virtual machine
    disk_path = '/tmp/focal_disk01.vdi'                 # host location of the virtual disk
    disk_size = 5 * 1024                                # virtual disk size in MiB
    ip = '10.0.0.10'                                    # IP address of the virtual machine
    ssh_path = '~/.ssh/id_rsa.pub'                      # public SSH key to provision for admin user of virtual machine
    admin_user = 'ansible'                              # name of admin user to add to virtual machine
    ansible_vault = '~/.ansible/blog_credentials.yml'   # ansible vault file that contains admin password

    # Provision CPU, memory, NIC, and UART
    config.vbguest.installer_options = { allow_kernel_upgrade: true }
    config.vm.provider "virtualbox" do |p|
        p.cpus = cpus
        p.memory = memory
        p.default_nic_type = "Am79C973"
        p.customize ["modifyvm", :id, "--uart1", "0x3F8", "4"]
        p.customize ["modifyvm", :id, "--uartmode1", "file", File::NULL]
    end

    # Initiate SCSI storage controller and add a disk image
    config.vm.provider "virtualbox" do |disk|
        if not File.exists?(disk_path)
            disk.customize ['createhd', '--filename', disk_path, '--variant', 'Standard', '--size', disk_size]
        end
        disk.customize ['storageattach', :id, '--storagectl', 'SCSI', '--port', 2, '--device', 0, '--type', 'hdd', '--medium', disk_path]
    end

    # Configure base image, hostname, network, partitions, and sudo user of virtual machine
    # Note 1: creates partitions and mount points on SCSI disk using 'createPartitions.sh' script
    # Note 2: adds sudo user using embedded script, requires env variables ADMIN_USERNAME and ADMIN_PASSWORD are set
    config.vm.define name do |vm|
        vm.ssh.extra_args = ["-o", "ConnectTimeout=600"]
        vm.ssh.insert_key = true
        vm.vm.boot_timeout = 600
        vm.vm.box = box
        vm.vm.hostname = name
        vm.vm.network "private_network", ip: ip
        vm.vm.provision "file", source: ssh_path, destination: "/vagrant/public-ssh/id_rsa.pub"
        
        # Create partitions, mount points, and sudo user during creation of virtual machine        
        if ARGV[0] == "up"
            # Create partitions and mount points
            if ! File.exist?(disk_path)
                vm.vm.provision "shell", path: "createPartitions.sh"
            end

            # Read password for admin_user from ansible vault file, asking user for vault password
            cmd = `ansible localhost -m debug -a var="#{admin_user}.password" -e "@#{ansible_vault}" --ask-vault-pass 2>/dev/null`
            admin_password = `echo "#{cmd}" | grep "#{admin_user}.password" | awk -F': ' '{printf $2}'`
            if admin_password.to_s.empty?
                puts 'ERROR: Could not decrypt admin password'
                abort
            end

            # Add sudo user with password and SSH public key
            vm.vm.provision "shell", inline: <<-SCRIPT
            # If needed, create an admin user with bash as default shell and SSH credentials
                set +o history # exclude commands from bash history to prevent password leakage
                if ! id -u "#{admin_user}" > /dev/null 2>&1 ; then
                    useradd -d /home/"#{admin_user}" -s /bin/bash "#{admin_user}"
                    echo "#{admin_user}:#{admin_password}" | chpasswd
                    usermod -aG sudo "#{admin_user}"  # assign sudo rights
                    mkdir -p "/home/#{admin_user}/.ssh" 
                    cp -r /vagrant/public-ssh/id_rsa.pub "/home/#{admin_user}/.ssh/authorized_keys" # deploy public ssh key
                fi
            SCRIPT
        end
    end
end